using ObserverRealExample;
using ObserverRealExample.Observers;

namespace ObservererRealExample
{
    class Program
    {
        static void Main(string[] args)
        {
            Stock stock = new Stock();
            var bank = new Bank(stock);
            var broker = new Broker(stock);

            //имитация торгов
            stock.Market();
            //брокер прекоращает наблюдать за торгами
            broker.StopTrade();
            //имитация торгов
            stock.Market();
        }
    }
}
//Ещё раз, как всё работает: 

//        Stock реализует интерфейс IObservable (наблюдаемый объект) — валютная биржа, за которой все следят.
//        В Stock реализован метод Market() — он представляет сессию торгов, и внутри него вся информация о курсах заключена в объекте StockData.
//        После торговой сессии происходит уведомление наблюдателей.
//        Наблюдатели (Broker, Bank) реализуют интерфейс IObserver, метод Update() которого принимает некоторый объект (в данном случае StockData) в виде параметра. 
//        В Broker также есть дополнительный метод StopTrade(), который позволяет отписаться от уведомлений и перестать быть наблюдателем.

//Это так называемая Push-модель, она довольно часто используется в архитектуре приложений, когда существует некий канал для публикации событий (или шина событий), к которой подключены (или подписаны) потребители информации.

//Альтернативой служит Pull-модель, где наблюдатели сами опрашивают источник получения информации. В нашей ситуации эта система представляется менее эффективной.

